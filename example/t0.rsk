
type x = a | b | c {} | {};
type x = {f:t};
type x = {f:{g:t}};
type x = a;
type x = {};
type x = a {};

type x = a |;
type x = a | b;
type x = a | b |;
type x = a | b | c {} | {};

const x = a $ b;
const x = a ;>> b;
const x = a ;>>= b;

fn x;
fn x (a:b):r = c;
fn x@(xx) (a:b) = c @{- xxx -};

state s
{
	var a:b = 2;
	transition x p q r (Just _) --> {post{ target state; }}
	transition x (p:T) --> {post{}}
}@{-
ddd
**ddd**
ddd
-}

state x
{
	transition x --> {
		post { target a; a' == 1 }@{- aa -}
		post { target b, state; b' == 2; state' == b; }@{- bb -}
	}
}

const x = __map {};
const x = __map { |-> };
const x = __map { 1 |-> 2 };
const x = __map { 1 |-> 2, };
const x = __map { 1 |-> 2, 3 |-> 4 };
const x = __map { 1 |-> 2, 3 |-> 4, };
const x = __map { 1 |-> 2, 3 |-> 4, 5 |-> 6 };
const x = __map { 1 |-> 2, 3 |-> 4, 5 |-> 6, };

const _abc_ = [_a|b_] @{- _a|b_
c

* a
* b
-};


state x
{
	transition xx
	when a @[- aa -],
	b@[- bb -] -->
	{
	}

	tau -->
	{
	}

	tau a b when c @[- cc -], d @[-
		dd
		dd
		dd
		-]-->
	{
		post {
			target pp;
			pp' @{- pp -};
			qq' @{-
				qq
				qq
				qq
			-};
		}@{- desc 1 -}
		post {
			target state;
			state';
		}@{- ss -}
	}@{-
		ttt
	-}
}
